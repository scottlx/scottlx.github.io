<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raft on windseek的博客</title><link>https://scottlx.github.io/tags/raft/</link><description>Recent content in Raft on windseek的博客</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 28 Oct 2022 09:30:00 +0800</lastBuildDate><atom:link href="https://scottlx.github.io/tags/raft/index.xml" rel="self" type="application/rss+xml"/><item><title>raft选举流程</title><link>https://scottlx.github.io/posts/raft%E9%80%89%E4%B8%BE%E6%B5%81%E7%A8%8B/</link><pubDate>Fri, 28 Oct 2022 09:30:00 +0800</pubDate><guid>https://scottlx.github.io/posts/raft%E9%80%89%E4%B8%BE%E6%B5%81%E7%A8%8B/</guid><description>&lt;h3 id="图解">图解&lt;/h3>
&lt;p>
&lt;a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">Raft (thesecretlivesofdata.com)&lt;/a>&lt;/p>
&lt;p>算法目的：实现了分布式节点的数据一致性&lt;/p>
&lt;p>节点有三个状态：follower，candidate，leader&lt;/p>
&lt;h3 id="leader-election">leader election&lt;/h3>
&lt;p>初始阶段所有节点处于follower状态&lt;/p>
&lt;p>follower状态下节点存在一个election timeout（150ms—300ms之间的随机数，随机降低了多个节点同时升级为candidate的可能性），election timeout内没有收到leader的heartbeat后，会自动升级为candidate状态，并开始一个新的election term。term是全局的，表示整个集群发生过选举的轮次(任期)。&lt;/p>
&lt;p>candidate状态下，节点会向集群内所有节点发送requests votes请求。其他节点收到requests votes请求后，如果在本次term内还没有投过票，则会返回选票，如果candidate收到的选票占集群节点的大多数，则升级为本次term的leader节点。升级为leader之后向他的follower 发送append entries消息（也就是包含entry消息的心跳），follower也会返回消息的response，系统正常情况下维持在该状态&lt;/p>
&lt;p>如果选举时，在一个term内发生了两个节点有同样的选票，会在超时过后进入下一轮进行重新选举&lt;/p>
&lt;h3 id="log-replication">log replication&lt;/h3>
&lt;p>client的请求只会发往leader。leader收到改动后，将改动写入日志（还未持久化commit），并将改动通过heartbeat广播至follower节点。follower节点写了entry之后（此时还未commit），返回ack。leader收到大于集群节点一半的ack之后，认为已经可以commit了，广播commit的通知。最终集群内所有follower触发commit，向leader返回ack。最后leader认为集群已经达成一致性了，向client返回ack&lt;/p>
&lt;p>如果集群中产生网络隔离，每个隔离域中会产生一个新的leader，整个集群会存在多个leader。follower少的leader由于获取不到majority ack，他的entry不会被commit。此时client往另一个follower多的leader发送数据改变请求，该隔离域的节点会被commit&lt;/p>
&lt;p>此时去掉网络隔离后，之前follower少的隔离域内未commit的entry会被刷成之前follower多的隔离域的entry,随后commit，此时集群再次达成一致性&lt;/p></description></item></channel></rss>